REFLECTION 1:
When would you want to use a remote repository rather than keeping all your work
local?

a. So I can access the repository from a different device if needed.
b. To save a copy of my work in the cloud as a backup in case my local repo's
   data is lost
c. To allow others to access my repository/make changes to the contents of my
   repository or project if I am working on a project in collaboration with 
   others. 
d. To have an online record of all projects I've worked on as a very
   rudimentary portfolio of sorts.



REFLECTION 2
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

If Git were to sync my repositories automatically, it may make changes to my
local or remote repos that would undo changes I may have made since the last
sync. It is safer to manually pull changes instead because I will only 
pull changes when I am certain they will not affect the rest of the programme
in an undesirable way.



REFLECTION 3:
Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

To fork a repository on GitHub is to copy a repository from one GitHub account
to another. The entire process is done on GitHub’s servers. Forking is important
as it allows users to clone copies of online repositories onto their own devices
for offline modification while still allowing the original creator of the repository
to claim credit for any work that has been done on the repository so far. In this way, a copy of the original repository can be modified even if a user cannot access or modify the original repo directly.

To clone a repository is to copy the contents of either a remote or a local repository to a local repository on a device. The process usually refers to 
‘downloading’ a copy of an online repository to a device for offline use, but could also mean copying a repository from one location on a device to another

Branches are a feature of Git that allow users to make significant 
modifications to a project without losing the commit data for earlier versions.
While cloning or forking a repository deals are operations performed ON repositories, branching is done WITHIN repositories.



REFLECTION 4:
What is the benefit of having a copy of the last known state of the remote
stored locally?

Having a branch in your local repo with the last known state of the remote repo can be useful if you will be offline for some time. This is because you can continue to work on your local repo, merge it with the offline copy of the remote repo, and then push the finished programme to the remote repo when you have internet access. This basically prevents allows you to work on the data in a remote repository even if you don’t have internet access, which can be useful.



REFLECTION 5:
How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

Would probably use a different version control system that allows cloud access to
multiple authors - something like Google Drive and Docs. 

Could easily designate one person as a moderator for the programme - only this person would be able to edit the file or repository. Others would only be able to make suggestions through comments on files. This would effectively be a simpler version of the pull request feature. Could easily revert to earlier versions of the code using version history option. Would have the added advantage of being a private repository, to keep the project under wraps until it was ready to be published. Greater degree of control over who sees the project and who doesn’t.

Would have no syntax highlighting. Would not work for multiple linked files or folders. Others would have to manually copy and paste the code into a text editor instead of using the command line to download the entire repository. Would have to manually merge changes, with no warnings about possible merge conflicts. This could lead to bugs if the moderator was not careful. Google Docs also doesn’t have syntax highlighting or code formatting facilities, which would have made code more difficult to read.


REFLECTION 6:
When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

a.	Use branches if working on experimental features that may or may not become a part of the final version of the programme. 

b.	Also use branches as a way of dividing a project into different features which are worked on by different people. This compartmentalisation of each feature helps prevent programmers from accidentally changing code for other parts of the programme. 

c.	Branches also allow for the use of pull requests - this makes sure that a piece of code can be reviewed before it is incorporated into the final version of the programme.

d.	Having separate branches for separate features also means that if I know exactly where to look/exactly which logs to check if I’m trying to troubleshoot an issue in a specific feature.

e.	That being said, branches are complicated. You need to manually resolve merge conflicts, which can be a bit of a hassle. The process becomes even more involved when done via GitHub, because branches have to be manipulated on the local repo before they can be pushed to the remote. 

Working on the master branch is useful if I’m the only one working on the programme.
